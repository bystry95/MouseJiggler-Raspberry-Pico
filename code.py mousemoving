# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries
# SPDX-License-Identifier: MIT

"""
This test will initialize the display using displayio and draw a solid green
background, a smaller purple rectangle, and some yellow text.
"""
import board
import busio
import terminalio
import displayio

import usb_hid
from adafruit_hid.mouse import Mouse
import time
import digitalio

# Starting in CircuitPython 9.x fourwire will be a seperate internal library
# rather than a component of the displayio library
try:
    from fourwire import FourWire
except ImportError:
    from displayio import FourWire
from adafruit_display_text import label
from adafruit_st7789 import ST7789

# Release any resources currently in use for the displays
displayio.release_displays()

tft_dc = board.GP8
tft_cs = board.GP9
spi_clk = board.GP10
spi_mosi = board.GP11
tft_rst = board.GP12
backlight = board.GP13
spi = busio.SPI(spi_clk, spi_mosi)

mouse = Mouse(usb_hid.devices)

buttonA = digitalio.DigitalInOut(board.GP15)  # Replace BUTTON_PIN with the actual pin where your button is connected
buttonA.direction = digitalio.Direction.INPUT
buttonA.pull = digitalio.Pull.UP

buttonB = digitalio.DigitalInOut(board.GP17)  # Replace BUTTON_PIN with the actual pin where your button is connected
buttonB.direction = digitalio.Direction.INPUT
buttonB.pull = digitalio.Pull.UP

buttonX = digitalio.DigitalInOut(board.GP19)  # Replace BUTTON_PIN with the actual pin where your button is connected
buttonX.direction = digitalio.Direction.INPUT
buttonX.pull = digitalio.Pull.UP

buttonY = digitalio.DigitalInOut(board.GP21)  # Replace BUTTON_PIN with the actual pin where your button is connected
buttonY.direction = digitalio.Direction.INPUT
buttonY.pull = digitalio.Pull.UP

led = digitalio.DigitalInOut(board.LED)
led.direction = digitalio.Direction.OUTPUT

display_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=tft_rst)

display = ST7789(
    display_bus,
    rotation=270,
    width=240,
    height=240,
    rowstart=80,
    backlight_pin=backlight,
)
def toggle_state():
    global state
    state = not state
    
# Make the display context
splash = displayio.Group()
display.root_group = splash

color_bitmap = displayio.Bitmap(240, 240, 1)
color_palette = displayio.Palette(1)
color_palette[0] = 0x000000  # Bright Green

bg_sprite = displayio.TileGrid(color_bitmap, pixel_shader=color_palette, x=0, y=0)
splash.append(bg_sprite)

# Draw a smaller inner rectangle
#inner_bitmap = displayio.Bitmap(200, 200, 1)
#inner_palette = displayio.Palette(1)
#inner_palette[0] = 0xAA0088  # Purple
#inner_sprite = displayio.TileGrid(inner_bitmap, pixel_shader=inner_palette, x=20, y=20)
#splash.append(inner_sprite)



def draw(text_input):
    splash.pop()
    # Draw a label
    text_group = displayio.Group(scale=2, x=0, y=20)
    text = text_input
    text_area = label.Label(terminalio.FONT, text=text, color=0xFFFFFF)
    text_group.append(text_area)  # Subgroup for text scaling
    splash.append(text_group)

switch = False  # Initial state of the switch is off

while True:
    if not buttonA.value:
        switch = False  # Toggle the switch state when the button is pressed
        time.sleep(0.2)  # Add a small delay to debounce the button
    if not buttonB.value:
        switch = False  # Toggle the switch state when the button is pressed
        time.sleep(0.2)  # Add a small delay to debounce the button
        
    if not buttonX.value:
        switch = True  # Toggle the switch state when the button is pressed
        time.sleep(0.2)  # Add a small delay to debounce the button
    if not buttonY.value:
        switch = True  # Toggle the switch state when the button is pressed
        time.sleep(0.2)  # Add a small delay to debounce the button

    if switch:
        on = False
        draw("Mouse Jiggler v.2137 \nState: Enabled. \n\nHold button:\nA or B to disable. \nX or Y to enable.\n")
        print("Enabled.")
        led.value = True
        mouse.move(x=+10, y=+10)
        time.sleep(0.5)

        led.value = False
        mouse.move(x=+10, y=-10)
        time.sleep(0.5)

        led.value = True
        mouse.move(x=-10, y=-10)
        time.sleep(0.5)

        led.value = False
        mouse.move(x=-10, y=+10)
        time.sleep(0.5)
    if not switch:
        draw("Mouse Jiggler v.2137 \nState: Disabled. \n\nHold button:\nA or B to disable. \nX or Y to enable.")
        print("Disabled.")
        time.sleep(2)
        led.value = False  # Turn off the LED when the switch is off
